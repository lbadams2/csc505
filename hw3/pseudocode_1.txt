# assume jobs sorted in order of increasing deadline
max-job-profit(p, t, d, begin, end)
    n = p.length    
    current_time = begin
    
    D = 0
    for i = 1 to n
        D = D + t[i]
    for i = 1 to n
        if d[i] > D
            d[i] = D

    end = D

    let r[0 ... n, 0...D] be a new array
    r[0,0] = 0
    
    q = -1
    for k = 1 to n
        while current_time < end
            if d[i] <= current_time + t[i]
                q = max(q, p[k] + r[current_time + t[k], d[k]] + r[d[i] + 1, d[n]])
                current_time = current_time + t[k]
                r[t[k], current_time] = q


# sort by deadline 
# every recursive call needs exclusive time window, chunk of D - current_time + latest deadline
# assume t[i] <= d[i]
recursive-max-job-profit(p, t, d, begin, end)
    if begin >= end
        return 0
    n = p.length

    D = 0
    for i = 1 to n
        D = D + t[i]
    for i = 1 to n
        if d[i] > D
            d[i] = D
    
    q = -1
    for i = 1 to n
        if d[i] <= begin + t[i]
            q = max(q, p[i] + recursive-max-job-profit(p[1..i], t[1..i], d[1..i], begin + t[i], d[i])
                                + recursive-max-job-profit(p[i+1..n], t[i+1..n], d[i+1..n], d[i] + 1, d[n]))
    return q


# assume jobs are sorted in order of increasing deadline
recursive-max-job-profit(p, t, d, current_time)
    n = p.length
    if n == 0
        return 0

    D = 0
    for i = 1 to n
        D = D + t[i]
    for i = 1 to n
        if d[i] > D
            d[i] = D

    q = -1
    k = 0
    for k = 1 to n
        if d[k] <= current_time + t[k]
            selected_profit = p[k]
            selected_time = t[k]
            q = max(q, selected_profit + recursive-max-job-profit(p - p[k], t - t[k], d - d[k], selected_time + current_time))
    return q


dp-max-profit(p, t, d)
    n = p.length
    D = 0
    for i = 1 to n
        D = D + t[i]
    for i = 1 to n
        if d[i] > D
            d[i] = D

    let m[0...n,0...D] be a new table
    for i = 0 to n
        m[i, 0] = 0
    for j = 0 to D
        m[0, j] = 0

    for i = 1 to n
        for j = 1 to D
            if j >= t_i
                q = m[i-1, j-t_i] + p_i
                if q > m[i, j]
                    m[i, j] = q
    
    return m